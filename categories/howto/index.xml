<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>howto on manueljimenezs</title><link>https://manueljimenezs.github.io/categories/howto/</link><description>manueljimenezs (howto)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://manueljimenezs.github.io/categories/howto/index.xml" rel="self" type="application/rss+xml"/><item><title>Scraping one of the main Spanish TV broadcasters with cookies, Python and yt-dlp</title><link>https://manueljimenezs.github.io/2023/02/scraping-one-of-the-main-spanish-tv-broadcasters-with-cookies-python-and-yt-dlp/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://manueljimenezs.github.io/2023/02/scraping-one-of-the-main-spanish-tv-broadcasters-with-cookies-python-and-yt-dlp/</guid><description>&lt;p>As a little project I wondered: Would it be possible to scrape the contents of a Spanish channel website so I could get their content offline and without any loss? That way you would be able to watch it everywhere, with no ads and no resolution limits. (This broadcaster is also known for their bad practices in ad breaks, on-screen elements and an unbrowsable website if not using adblock).&lt;/p>
&lt;p>I was thinking about publishing the code in the first place, but I think it will be more safe and productive to write about the process of doing it so you could extend it to any websites you like:&lt;/p>
&lt;blockquote>
&lt;p>If you give a man a fish, you feed him for a day. If you teach a man to fish, you feed him for a lifetime.&lt;/p>
&lt;/blockquote>
&lt;div class="notice warning">
&lt;span class="icon alert">
&lt;object data="/icons/alert.svg" width="20" height="20">&lt;/object>
&lt;/span>
&lt;p>This is generic information, the URLs provided in this article are not real. This is only for educational purposes about working with python, requests and cookies.&lt;/p>
&lt;/div>
&lt;h1 id="analyzing-the-problem" >Analyzing the problem
&lt;span>
&lt;a href="#analyzing-the-problem">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>To be able to see any content on that channel platform, you will need to create a user account. That means, we will need to create an account to be able to make and send our requests to their internal API&lt;/p>
&lt;p>For this I used any modern browser and I toggled the &lt;strong>Developer tools&lt;/strong> in the &lt;strong>Networking&lt;/strong> tab. That way you will be able to see the login sequence.&lt;/p>
&lt;p>In this case, the login is a POST request to an API endpoint sending your username and password as an input. Then it generates a session token inside a cookie and allows you to interact with the internal API.&lt;/p>
&lt;p>You could replicate that in python like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># create a new session object to store session data for future requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">credentials&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;username:&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;myuser&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;password:&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;mypassword&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://api.web.com/login&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notice info">
&lt;span class="icon info">
&lt;object data="/icons/info.svg" width="20" height="20">&lt;/object>
&lt;/span>
&lt;p>You can use the &lt;code>python-dotenv&lt;/code> package to store credentials inside an external file&lt;/p>
&lt;/div>
&lt;h1 id="choose-an-example-content" >Choose an example content
&lt;span>
&lt;a href="#choose-an-example-content">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>The best way to scrape something is to use actual data, but be careful: some websites have request limits and may block you with a &lt;code>HTTP 429 Too Many Requests&lt;/code> error. One way of avoiding this is dumping your jsons and content locally and scraping over that local copy.&lt;/p>
&lt;p>After logging in, we will send a GET request with the URL of the content we want to scrape (e.g: &lt;code>http://web.com/episode/example&lt;/code>) Use a browser in developer mode first to see what you need to look for. For me, the useful data was stored inside two &lt;code>&amp;lt;script&amp;gt;&lt;/code> tags.&lt;/p>
&lt;p>For this, you may find the &lt;code>re&lt;/code> and &lt;code>BeautifulSoup4&lt;/code> packages useful for filtering the info you need. In this case, a simple call to re was all I needed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://web.com/episode/example&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">matches&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;script&amp;gt;(.*?)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Inside those tags theres another url that will lead you to the specific content API endpoint, the response is a JSON where you could scrape the metadata and the streaming url&lt;/p>
&lt;div class="notice info">
&lt;span class="icon info">
&lt;object data="/icons/info.svg" width="20" height="20">&lt;/object>
&lt;/span>
&lt;p>You can use the &lt;code>json get('')&lt;/code> functions or the &lt;code>jmespath&lt;/code> package to fetch the data you want from a json into variables&lt;/p>
&lt;/div>
&lt;h1 id="interfacing-your-code-with-yt-dlp" >Interfacing your code with yt-dlp
&lt;span>
&lt;a href="#interfacing-your-code-with-yt-dlp">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>yt-dlp is a fork of youtube-dl, a python utility to download video from lots of sources you can install it with:&lt;/p>
&lt;pre tabindex="0">&lt;code>pip3 install yt-dlp
&lt;/code>&lt;/pre>&lt;p>Suppose we already extracted a filename string and the m3u8 playlist with the content we want to download. We can pass them to yt-dlp like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">yt_dlp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># * the options we will pass to yt-dlp *&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># in this case only the outtmpl property to specify the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># output filename we extracted in a previous request&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ydl_opts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;outtmpl&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s1">&amp;#39;.mp4&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">items&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;mpegurl&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="n">yt_dlp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">YoutubeDL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ydl_opts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">ydl&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">error_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ydl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That will have your file downloaded, yt-dlp will take care of downloading the separate audio and video streams and merging them into a file.&lt;/p>
&lt;p>I hope you find this information useful and try to get your hands dirty with something that comes to your mind. Scraping can be very powerful for automation, IoT, Telegram notifications&amp;hellip;&lt;/p></description></item><item><title>Patching the kernel as a custom package in Archlinux</title><link>https://manueljimenezs.github.io/2022/11/patching-the-kernel-as-a-custom-package-in-archlinux/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://manueljimenezs.github.io/2022/11/patching-the-kernel-as-a-custom-package-in-archlinux/</guid><description>&lt;p>&lt;a href="https://manueljimenezs.github.io/2021/09/how-i-ended-up-compiling-my-own-linux-kernel/">Following the adventure of patching the linux kernel&lt;/a>, I tried to automate it a bit. Part of the process is well documented as always in the &lt;a href="https://wiki.archlinux.org/title/Kernel/Arch_Build_System">wiki&lt;/a>&lt;/p>
&lt;p>The idea is to fetch the official Archlinux sources for the linux kernel so we can modify them and add our patches.&lt;/p>
&lt;div class="notice info">
&lt;span class="icon info">
&lt;object data="/icons/info.svg" width="20" height="20">&lt;/object>
&lt;/span>
&lt;p>Could I buy a graphics card with a normal HDMI port for a hundred bucks and skip all of this mess? Yes, but where is the fun in that?&lt;/p>
&lt;/div>
&lt;p>Start by creating a new src folder in your homedir.&lt;/p>
&lt;p>We will need the &lt;code>asp&lt;/code> package that will take care of fetching the sources for us by issuing these commands:&lt;/p>
&lt;pre tabindex="0">&lt;code>asp update
asp export linux
&lt;/code>&lt;/pre>&lt;p>I will also add my custom kernel patches in a &lt;code>patches/*.diff&lt;/code> dir, you can see
&lt;a href="https://manueljimenezs.github.io/2021/09/how-i-ended-up-compiling-my-own-linux-kernel/">why I need to patch the kernel here&lt;/a>&lt;/p>
&lt;p>There is also another issue here: the config for the kernel issued by asp is different than the upstream package, meaning that we will need to modify it, otherwise my system, which is a BTRFS filesystem, will not boot:&lt;/p>
&lt;pre tabindex="0">&lt;code>cd linux
mv config config.old
sed -r &amp;#34;s/^(|#)CONFIG_BTRFS_FS=.*/CONFIG_BTRFS_FS=y/g&amp;#34; config.old &amp;gt; config
&lt;/code>&lt;/pre>&lt;p>I also built a PKGBUILD patch with e.g &lt;code>diff -Naru PKGBUILD PKGBUILD.old &amp;gt; custom_PKGBUILD.patch&lt;/code> to apply it on each kernel release, this gets rid of building the docs and their dependencies, also does a shallow clone and introduces my &lt;code>0001-amdgpu-clock.patch&lt;/code> patchfile. That way the build will take less time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-patch" data-lang="patch">&lt;span class="line">&lt;span class="cl">&lt;span class="gd">--- PKGBUILD 2022-10-29 12:28:27.038231602 +0200
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+++ PKGBUILD 2022-10-29 12:28:27.038231602 +0200
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>&lt;span class="gu">@@ -1,6 +1,6 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> # Maintainer: Jan Alexander Steffens (heftig) &amp;lt;heftig@archlinux.org&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">-pkgbase=linux
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+pkgbase=linux-amdclock
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> pkgver=6.0.5.arch1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkgrel=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkgdesc=&amp;#39;Linux&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">@@ -10,14 +10,13 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> license=(GPL2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> makedepends=(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bc libelf pahole cpio perl tar xz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick texlive-latexextra
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span> git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> options=(&amp;#39;!strip&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _srcname=archlinux-linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> source=(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- &amp;#34;$_srcname::git+https://github.com/archlinux/linux?signed#tag=$_srctag&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span> config # the main kernel config file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ 0001-amdgpu-clock.patch
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> validpgpkeys=(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;ABAF11C65A2970B130ABE3C479BE3E4300411886&amp;#39; # Linus Torvalds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">@@ -26,13 +25,14 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> &amp;#39;C7E7849466FE2358343588377258734B41C31549&amp;#39; # David Runge &amp;lt;dvzrv@archlinux.org&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sha256sums=(&amp;#39;SKIP&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- &amp;#39;05168cbbeb6378eec6c84fe3300cede4fa5cf6130c39fb8af95040529bd390a6&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ &amp;#39;SKIP&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> export KBUILD_BUILD_HOST=archlinux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> export KBUILD_BUILD_USER=$pkgbase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> export KBUILD_BUILD_TIMESTAMP=&amp;#34;$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> prepare() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ git clone --depth=1 --branch=$_srctag &amp;#34;https://github.com/archlinux/linux&amp;#34; $_srcname
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> cd $_srcname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Setting version...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">@@ -60,7 +60,7 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cd $_srcname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- make htmldocs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ make all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _package() {
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That patch is then applied like this: &lt;code>patch -p0 &amp;lt; ../custom_PKGBUILD.patch&lt;/code>&lt;/p>
&lt;p>Now the only thing left is to build and install it:&lt;/p>
&lt;pre tabindex="0">&lt;code>makepkg -s
sudo pacman -U linux-amdclock-*.zst
&lt;/code>&lt;/pre>&lt;p>You can bundle all of it in a shell script to save time in further upgrades:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>rm -rf linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">asp update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">asp &lt;span class="nb">export&lt;/span> linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp patches/* linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv config config.old
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># enable support for / as BTRFS filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -r &lt;span class="s2">&amp;#34;s/^(|#)CONFIG_BTRFS_FS=.*/CONFIG_BTRFS_FS=y/g&amp;#34;&lt;/span> config.old &amp;gt; config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">patch -p0 &amp;lt; ../custom_PKGBUILD.patch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Full-disk encryption on Archlinux with LVM+LUKS+BTRFS</title><link>https://manueljimenezs.github.io/2020/05/full-disk-encryption-on-archlinux-with-lvm-luks-btrfs/</link><pubDate>Thu, 28 May 2020 19:19:54 +0100</pubDate><guid>https://manueljimenezs.github.io/2020/05/full-disk-encryption-on-archlinux-with-lvm-luks-btrfs/</guid><description>&lt;hr>
&lt;h1>Table Of Contents&lt;/h1>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="#planning-the-disk-layout">Planning the disk layout&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setting-up-the-disk-layout-and-volumes">Setting up the disk layout and volumes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#continue-with-the-usual-arch-install">Continue with the usual Arch install&lt;/a>&lt;/li>
&lt;li>&lt;a href="#finishing-the-installation">Finishing the installation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;hr>
&lt;p>This article will guide you through a basic Archlinux installation with full-disk encryption and the usage of the BTRFS filesystem for managing subvolumes and snapshots.&lt;/p>
&lt;p>The steps shown here are all available in the Arch Wiki, but I wanted to make an installation example from scratch until OS startup.&lt;/p>
&lt;p>This installation will presume you are booting from an &lt;strong>EFI System&lt;/strong> and that you will be using a SWAP partition. Again, this is a concrete real-world example but feel free to make it match to your likings.&lt;/p>
&lt;h2 id="planning-the-disk-layout" >Planning the disk layout
&lt;span>
&lt;a href="#planning-the-disk-layout">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;!-- more -->
&lt;p>In this case we&amp;rsquo;re going to make two main partitions in a GPT partition table:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/dev/sda1&lt;/code>, the ESP (UEFI Boot Partition) that will hold our kernel and the bootloader. Formatted as FAT32 with a size of 512MB with &lt;code>mkfs.fat -F 32 /dev/sda1&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/sda2&lt;/code>, is a partition that will contain an encrypted container which at the same time will contain an LVM physical volume which at the same time will contain logical volumes for both the &lt;strong>root&lt;/strong> and &lt;strong>swap&lt;/strong> filesystems. Yeah, this seems a little bit crazy but it is a very flexible configuration :)&lt;/li>
&lt;/ul>
&lt;div class="invert" >&lt;img src="https://manueljimenezs.github.io/img/2020-05-28-disk-encryption/diagram.svg" alt="">&lt;/div>
&lt;h2 id="setting-up-the-disk-layout-and-volumes" >Setting up the disk layout and volumes
&lt;span>
&lt;a href="#setting-up-the-disk-layout-and-volumes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Supposing you&amp;rsquo;ve already created the two partitions mentioned about and formatted &lt;code>/dev/sda1&lt;/code> as FAT32, the next step is to create the encrpyted container:&lt;/p>
&lt;pre tabindex="0">&lt;code># cryptsetup luksFormat /dev/sda2
# cryptsetup open /dev/sda2 cryptlvm
&lt;/code>&lt;/pre>&lt;p>Consecutively, a physical volume called &lt;code>cryptlvm&lt;/code> is going to be created. We will also add that physical volume to a volume group called &lt;code>secure&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code># pvcreate /dev/mapper/cryptlvm
# vgcreate secure /dev/mapper/cryptlvm
&lt;/code>&lt;/pre>&lt;p>Then we&amp;rsquo;re going to focus on creating the &lt;strong>swap&lt;/strong> and &lt;strong>root&lt;/strong> filesystems:&lt;/p>
&lt;p>The &lt;strong>swap&lt;/strong> partition will be 4GB and the rest will be used for the BTRFS system partition&lt;/p>
&lt;pre tabindex="0">&lt;code>lvcreate -L 4G secure -n swap
lvcreate -l 100%FREE secure -n root
&lt;/code>&lt;/pre>&lt;p>Initialize the &lt;strong>swap&lt;/strong> partition:&lt;/p>
&lt;pre tabindex="0">&lt;code>mkswap /dev/mapper/secure-swap
swapon /dev/mapper/secure-swap
&lt;/code>&lt;/pre>&lt;p>Create the &lt;strong>BTRFS&lt;/strong> filesystem and their subsequent subvolumes: &amp;lsquo;@&amp;rsquo; for root, &amp;lsquo;@home&amp;rsquo; for the home folder and &amp;lsquo;@snapshots&amp;rsquo; for making filesystem backups. This makes it to discriminate directories when making backups.&lt;/p>
&lt;pre tabindex="0">&lt;code>mkfs.btrfs /dev/mapper/secure-system
mount /dev/mapper/secure-system /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@snapshots
umount /mnt
&lt;/code>&lt;/pre>&lt;p>Now we&amp;rsquo;re going to mount all the volumes and we&amp;rsquo;re going to enable zstd compression.&lt;/p>
&lt;pre tabindex="0">&lt;code>mount -o subvol=@,compression=zstd /dev/mapper/secure-system /mnt
mkdir -p /mnt/{home,boot}
mount -o subvol=@home,compression=zstd /dev/mapper/secure-system /mnt/home
mount /dev/sda1 /mnt/boot
&lt;/code>&lt;/pre>&lt;h2 id="continue-with-the-usual-arch-install" >Continue with the usual Arch install
&lt;span>
&lt;a href="#continue-with-the-usual-arch-install">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>&lt;strong>Follow the normal install of the base system and basic config. in the &lt;a href="https://wiki.archlinux.org/index.php/installation_guide">Installation guide&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="finishing-the-installation" >Finishing the installation
&lt;span>
&lt;a href="#finishing-the-installation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>When arriving at the mkinitcpio part some extra steps will be required:&lt;/p>
&lt;p>Install &lt;code>intel-ucode&lt;/code> (or the AMD counterpart) and install systemd-boot on the ESP:&lt;/p>
&lt;pre tabindex="0">&lt;code>bootctl –path=/boot install
&lt;/code>&lt;/pre>&lt;p>Head over to the ESP (/boot) and create &lt;code>arch.conf&lt;/code> inside the &lt;code>entries&lt;/code> directory with the following content:&lt;/p>
&lt;pre tabindex="0">&lt;code>title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img # ONLY FOR INTEL CPUs!!
initrd /initramfs-linux.img
options luks.uuid=&amp;lt;LUKS_UUID&amp;gt; root=/dev/mapper/secure-system rootflags=subvol=@ rd.luks.options=discard
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Replace &lt;code>&amp;lt;LUKS_UUID&amp;gt;&lt;/code> with the UUID shown in &lt;code>blkid&lt;/code> in the filesystem flagged as LUKS.&lt;/strong>&lt;/p>
&lt;p>Add &lt;code>default arch&lt;/code> inside the &lt;code>loader.conf&lt;/code> file.&lt;/p>
&lt;p>Edit the HOOKS line in &lt;code>/etc/mkinitcpio.conf&lt;/code> with the following modules:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">HOOKS=(base systemd autodetect modconf keyboard sd-vconsole block sd-encrypt sd-lvm2 filesystems fsck)
&lt;/code>&lt;/pre>&lt;p>Lastly run &lt;code>mkinitcpio -p linux&lt;/code> and &lt;code>reboot&lt;/code>. If you&amp;rsquo;re lucky enough you will enter to your newly installed operating system.&lt;/p></description></item><item><title>rEFInd: An elegant bootloader</title><link>https://manueljimenezs.github.io/2019/10/refind-an-elegant-bootloader/</link><pubDate>Tue, 29 Oct 2019 20:39:54 +0100</pubDate><guid>https://manueljimenezs.github.io/2019/10/refind-an-elegant-bootloader/</guid><description>&lt;hr>
&lt;h1>Table Of Contents&lt;/h1>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#efi-requirements">EFI Requirements&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-esp">The ESP&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#refind">rEFInd&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#manual-install">Manual install&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-linux">Adding Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="#extra-ubuntu-copying-kernels-to-esp">Extra: Ubuntu: Copying kernels to ESP&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;hr>
&lt;p>
&lt;img src="https://manueljimenezs.github.io/img/refind_scr.png" alt="Refind Bootloader">
&lt;/p>
&lt;h1 id="introduction" >Introduction
&lt;span>
&lt;a href="#introduction">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>From the year 2013, Microsoft switched its operating system&amp;rsquo;s booting mode to a technology called EFI, already being used in Macs for a long time.&lt;/p>
&lt;p>In UEFI (The PC implementation) multiple applications can coexist, this means you can combine multiple bootloaders such as Windows Boot, GRUB, systemd-boot without taking over each other.&lt;/p>
&lt;h1 id="efi-requirements" >EFI Requirements
&lt;span>
&lt;a href="#efi-requirements">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>Your motherboard has to be supported (&amp;gt;2013)&lt;/li>
&lt;li>Your disk has to be formatted in GPT instead of MBR&lt;/li>
&lt;li>You need an ESP (EFI system partition) that stores all the &lt;em>bootable&lt;/em> executables&lt;/li>
&lt;/ul>
&lt;h2 id="the-esp" >The ESP
&lt;span>
&lt;a href="#the-esp">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The ESP (EFI system partition) is a small FAT32 partition (~512MB) that stores all the bootloaders:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── Boot
│   ├── BOOT.CSV
│   ├── bootx64.efi
│   └── ref.bak
├── Microsoft
│   ├── Boot
│   └── Recovery
├── refind
│   ├── BOOT.CSV
│   ├── drivers_x64
│   ├── icons
│   ├── keys
│   ├── refind.conf
│   ├── refind.conf.bak
│   ├── refind_x64.efi
│   └── themes
├── tools
└── ubuntu
├── fw
└── fwupx64.efi
&lt;/code>&lt;/pre>&lt;p>The default bootloader is stored in the firmware level in something we call &lt;em>EFI Variables&lt;/em> that we&amp;rsquo;ll configure in just a moment. In some motherboards the default bootloader can be chosen in the motherboard config screen.&lt;/p>
&lt;p>The &lt;code>Boot&lt;/code> directory is a fallback option just in case those variables are not set, you could copy any &lt;code>.efi&lt;/code> file in other folder to &lt;code>bootx64.efi&lt;/code> to make it your fallback option.&lt;/p>
&lt;h1 id="refind" >rEFInd
&lt;span>
&lt;a href="#refind">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>rEFInd is a graphic bootloader that is smart enough to find the bootable entries without much configuration, it is also able to remember the last booted option to be selected on the next boot. It is also able to boot USB sticks and be bootable from any install media.&lt;/p>
&lt;h2 id="manual-install" >Manual install
&lt;span>
&lt;a href="#manual-install">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Supposing you have an ESP partition in a GPT disk (If you are using Windows 10, you probably are) you just have to copy &lt;a href="https://sourceforge.net/projects/refind/files/0.11.4/refind-bin-0.11.4.zip/download">the refind folder&lt;/a> into the /EFI folder of the ESP (There are also OS-specific installers that do this)&lt;/p>
&lt;p>Once copied you have to tell your motherboard to boot from it by default.&lt;/p>
&lt;p>In Linux there is an utility that list the boot order called &lt;code>efibootmgr&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>BootCurrent: 0002
Timeout: 1 seconds
BootOrder: 0002,0000,0006,0001,0003,0004
Boot0000* Windows Boot Manager
Boot0001* UEFI:CD/DVD Drive
Boot0002* rEFInd Boot Manager
Boot0003* UEFI:Removable Device
Boot0004* UEFI:Network Device
Boot0006* proxmox
&lt;/code>&lt;/pre>&lt;p>To add rEFInd:&lt;/p>
&lt;p>&lt;code>efibootmgr -c -l \\EFI\\refind\\refind_x64.efi -L rEFInd&lt;/code>&lt;/p>
&lt;p>To change the boot order:&lt;/p>
&lt;p>&lt;code>efibootmgr -o 0,1,2&lt;/code>&lt;/p>
&lt;p>To remove an entry:&lt;/p>
&lt;p>&lt;code>efibootmgr -Bb 0000&lt;/code>&lt;/p>
&lt;p>Refind has a &lt;code>refind.conf&lt;/code> and lots of themes to customize it.&lt;/p>
&lt;h2 id="adding-linux" >Adding Linux
&lt;span>
&lt;a href="#adding-linux">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Windows is automatically detected by refind and some Linux distros too, but if you want to be sure add a &lt;code>refind_linux.conf&lt;/code> file into your Linux Partition in the &lt;code>/boot/&lt;/code> directory:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;Boot using default options&amp;#34; &amp;#34;root=PARTUUID=a9fbd673-2ba9-4dcd-be6b-97423dd74c89 rw initrd=/boot/amd-ucode.img initrd=/boot/initramfs-%v.img&amp;#34;
&lt;/code>&lt;/pre>&lt;p>the root points to the ID of the partition in which the distro is installed, it can be retrieved with &lt;code>blkid&lt;/code>.&lt;/p>
&lt;h2 id="extra-ubuntu-copying-kernels-to-esp" >Extra: Ubuntu: Copying kernels to ESP
&lt;span>
&lt;a href="#extra-ubuntu-copying-kernels-to-esp">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;pre tabindex="0">&lt;code>manu@x240:~$ cat /etc/kernel/postinst.d/zz-kernel-esp
#!/bin/bash
#
# This is a simple custom kernel hook to populate the systemd-boot entries
# whenever kernels are added or removed during an update.
#
vmlinuz=$(find /boot -maxdepth 1 -name &amp;#34;vmlinuz-*-generic&amp;#34;)
version=$(echo $vmlinuz | grep -o -P &amp;#34;\d+\.\d+\.\d+\-\d+&amp;#34; | sort -V | head -n -1)
latest=$(echo $vmlinuz | grep -o -P &amp;#34;\d+\.\d+\.\d+\-\d+&amp;#34; | sort -V | tail -n 1)
echo &amp;#34;&amp;gt;&amp;gt; COPYING ${latest}-generic. LATEST VERSION.&amp;#34;
for file in initrd.img vmlinuz; do
cp &amp;#34;/boot/${file}-${latest}-generic&amp;#34; &amp;#34;/boot/efi/EFI/ubuntu/${file}-generic&amp;#34;
done
&lt;/code>&lt;/pre></description></item></channel></rss>